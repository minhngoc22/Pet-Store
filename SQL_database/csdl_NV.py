from SQL_database.ketnoiSQL import Database  
import sqlite3

class EmployeeDatabase(Database):
    def get_all_employees(self):
        """L·∫•y to√†n b·ªô danh s√°ch nh√¢n vi√™n (Bao g·ªìm ID)"""
        conn = self.connect()
        if conn is None:
            return [], []

        try:
            cursor = conn.cursor()
            cursor.execute("""
            SELECT  employee_code, full_name, phone, email, address, salary, position, note 
            FROM Employees
            """)
            data = cursor.fetchall()
            columns = [ "M√£ NV", "T√™n Nh√¢n Vi√™n", "SƒêT", "Email", "ƒê·ªãa Ch·ªâ", "L∆∞∆°ng", "V·ªã tr√≠","Ghi ch√∫"]
            return columns, data
        except sqlite3.Error as e:
            print("‚ùå L·ªói l·∫•y danh s√°ch nh√¢n vi√™n:", e)
            return [], []
        finally:
            conn.close()



    def add_employee(self, full_name, phone, email, address, salary, position,note):
        """Th√™m nh√¢n vi√™n m·ªõi"""
        conn = self.connect()
        if conn is None:
            return False

        try:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO Employees (full_name, phone, email, address, salary, position,note) 
                VALUES (?, ?, ?, ?, ?, ?,?)
            """, (full_name, phone, email, address, salary, position,note))

            conn.commit()
            print(f"‚úÖ Th√™m nh√¢n vi√™n '{full_name}' th√†nh c√¥ng!")
            return True
        except sqlite3.Error as e:
            print("‚ùå L·ªói khi th√™m nh√¢n vi√™n:", e)
            return False
        finally:
            conn.close()

    def delete_employee(self,  employee_code):
        """X√≥a nh√¢n vi√™n theo ID."""
        conn = self.connect()
        if conn is None:
            return False

        try:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM  Employees WHERE employee_code = ?", ( employee_code,))
            conn.commit()
            print(f"üóëÔ∏è X√≥a s·∫£n ph·∫©m c√≥ ID {id} th√†nh c√¥ng!")
            return True
        except sqlite3.Error as e:
            print("‚ùå L·ªói khi x√≥a s·∫£n ph·∫©m:", e)
            return False
        finally:
            conn.close()

    def update_employee(self, employee_code, full_name, phone, email, address, salary, position,note):
        """C·∫≠p nh·∫≠t th√¥ng tin nh√¢n vi√™n d·ª±a v√†o ID"""
        conn = self.connect()
        if conn is None:
            return False

        try:
            cursor = conn.cursor()
            query = """
        UPDATE Employees
        SET full_name = ?, phone = ?, email = ?, address = ?, salary = ?, position = ?, note = ?
        WHERE employee_code = ?
        """
            cursor.execute(query, (full_name, phone, email, address, salary, position,note, employee_code))
            conn.commit()
            print(f"‚úÖ C·∫≠p nh·∫≠t nh√¢n vi√™n c√≥ ID {employee_code} th√†nh c√¥ng!")
            return True
        except sqlite3.Error as e:
            print(f"‚ùå L·ªói c·∫≠p nh·∫≠t nh√¢n vi√™n: {e}")
            return False
        finally:
            conn.close()


    def search_employee_by_name(self, search_text):
        """T√¨m ki·∫øm nh√¢n vi√™n theo t√™n"""
        conn = self.connect()
        if conn is None:
            return []

        try:
            cursor = conn.cursor()
            query = """
            SELECT  employee_code, full_name, phone, email, address, salary, position,note
            FROM Employees
            WHERE full_name LIKE ?
            """
            cursor.execute(query, (f"%{search_text}%",))
            results = cursor.fetchall()
            return results
        except sqlite3.Error as e:
            print(f"‚ùå L·ªói t√¨m ki·∫øm nh√¢n vi√™n: {e}")
            return []
        finally:
            conn.close()

    
    def get_positions(self):
        """L·∫•y danh s√°ch v·ªã tr√≠ t·ª´ CSDL"""
        conn = self.connect()
        if conn is None:
            return []

        try:
            cursor = conn.cursor()
            cursor.execute("SELECT DISTINCT position FROM Employees")
            positions = [row[0] for row in cursor.fetchall()]
            print("Danh s√°ch v·ªã tr√≠ l·∫•y t·ª´ CSDL:", positions)  # Debug
            return positions
        except sqlite3.Error as e:
            print(f"‚ùå L·ªói khi l·∫•y danh s√°ch v·ªã tr√≠: {e}")
            return []
        finally:
            conn.close()

    def get_employees_by_position(self, position):
        """L·∫•y danh s√°ch nh√¢n vi√™n theo v·ªã tr√≠"""
        conn = self.connect()
        if conn is None:
            return []

        try:
            cursor = conn.cursor()
            if position == "T·∫•t c·∫£":
                cursor.execute("SELECT employee_code, full_name, phone, email, address, salary, position ,note FROM Employees")
            else:
                cursor.execute(
                "SELECT employee_code, full_name, phone, email, address, salary, position, note FROM Employees WHERE position = ?",
                    (position,))
        
            employees = cursor.fetchall()
            print(f"‚ö° Debug - Nh√¢n vi√™n theo v·ªã tr√≠ [{position}]:", employees)  # Debug
            return employees
        except sqlite3.Error as e:
            print(f"‚ùå L·ªói khi l·∫•y nh√¢n vi√™n theo v·ªã tr√≠: {e}")
            return []
        finally:
            conn.close()

    def get_employee_by_code(self, employee_code):
        """L·∫•y th√¥ng tin nh√¢n vi√™n d·ª±a tr√™n employee_code."""
        conn = self.connect()
        if conn is None:
            return None

        try:
            cursor = conn.cursor()
            query = """
                SELECT employee_code, full_name, phone, email, address, salary, position ,note
                FROM Employees
                WHERE employee_code = ?
        """
            cursor.execute(query, (employee_code,))
            row = cursor.fetchone()

            if row:
                return {
                "employee_code": row[0],
                "full_name": row[1],
                "phone": row[2],
                "email": row[3],
                "address": row[4],
                "salary": row[5],
                "position": row[6],
                "note" : row[7]
            }
            return None
        except Exception as e:
            print(f"‚ùå L·ªói khi l·∫•y th√¥ng tin nh√¢n vi√™n: {e}")
            return None
        finally:
            conn.close()

