from SQL_database.ketnoiSQL import Database  
import sqlite3

class OrderDatabase(Database):
    def get_all(self):
        """L·∫•y to√†n b·ªô danh s√°ch ƒë∆°n h√†ng"""
        conn = self.connect()
        if conn is None:
            return [], []

        try:
            cursor = conn.cursor()
            cursor.execute("""
            SELECT order_code, Customers.customer_code, total_amount, order_date, status, payment, Orders.note
FROM Orders
JOIN Customers ON Orders.customer_id = Customers.id

        """)
            data = cursor.fetchall()

        
            print("‚ö° Debug - D·ªØ li·ªáu ƒë∆°n h√†ng:", data)  # Ki·ªÉm tra d·ªØ li·ªáu
            return  data
        except sqlite3.Error as e:
            print("‚ùå L·ªói l·∫•y danh s√°ch ƒë∆°n h√†ng:", e)
            return [], []
        finally:
            conn.close()

   

    def search_order_by_id(self, order_id):
        """T√¨m ki·∫øm ƒë∆°n h√†ng theo m√£ ƒë∆°n h√†ng"""
        conn = self.connect()
        if conn is None:
            return None

        try:
            cursor = conn.cursor()
            query = """
            SELECT order_code, Customers.full_name, Customers.phone, Customers.email, Customers.address, total_amount, order_date, status, payment,note
            FROM Orders
            JOIN Customers ON Orders.customer_id = Customers.id
            WHERE Orders.id = ?
            """
            cursor.execute(query, (order_id,))
            row = cursor.fetchone()
            
            if row:
                return {
                    "order_code": row[0],
                    "customer_name": row[1],
                    "phone": row[2],
                    "email": row[3],
                    "address": row[4],
                    "total_amount": row[5],
                    "order_date": row[6],
                    "status": row[7],
                    "payment": row[8],
                    "note": row[9]
                }
            return None
        except sqlite3.Error as e:
            print(f"‚ùå L·ªói khi t√¨m ƒë∆°n h√†ng: {e}")
            return None
        finally:
            conn.close()

    def get_statuses(self):
        """L·∫•y danh s√°ch v·ªã tr√≠ t·ª´ CSDL"""
        conn = self.connect()
        if conn is None:
            return []

        try:
            cursor = conn.cursor()
            cursor.execute("SELECT DISTINCT status FROM Orders")
            positions = [row[0] for row in cursor.fetchall()]
            print("Danh s√°ch v·ªã tr√≠ l·∫•y t·ª´ CSDL:", positions)  # Debug
            return positions
        except sqlite3.Error as e:
            print(f"‚ùå L·ªói khi l·∫•y danh s√°ch v·ªã tr√≠: {e}")
            return []
        finally:
            conn.close()

    def get_order_by_status(self, status):
        """L·∫•y danh s√°ch ƒë∆°n h√†ng theo tr·∫°ng th√°i"""
        conn = self.connect()
        if conn is None:
            return []

        try:
            cursor = conn.cursor()
            if status == "T·∫•t c·∫£":
                cursor.execute("""
                    SELECT Orders.order_code, Customers.customer_code,
                           Orders.total_amount, Orders.order_date, Orders.status, Orders.payment, Orders.note
                    FROM Orders
                    JOIN Customers ON Orders.customer_id = Customers.id
                """)
            else:
                cursor.execute("""
                    SELECT Orders.order_code, Customers.customer_code, 
                           Orders.total_amount, Orders.order_date, Orders.status, Orders.payment, Orders.note
                    FROM Orders
                    JOIN Customers ON Orders.customer_id = Customers.id
                    WHERE status = ?
                """, (status,))

            orders = cursor.fetchall()
            print(f"‚ö° Debug - ƒê∆°n h√†ng theo tr·∫°ng th√°i [{status}]:", orders)  # Debug
            return orders
        except sqlite3.Error as e:
            print(f"‚ùå L·ªói khi l·∫•y ƒë∆°n h√†ng theo tr·∫°ng th√°i: {e}")
            return []
        finally:
            conn.close()

    def get_all_employees(self):
        """L·∫•y t·∫•t c·∫£ danh m·ª•c t·ª´ CSDL."""
        conn = self.connect()
        if conn is None:
            return []

        try:
            cursor = conn.cursor()
            cursor.execute("SELECT full_name FROM Employees")
            return [row[0] for row in cursor.fetchall()]
        except Exception as e:
            print(f"‚ùå L·ªói l·∫•y danh m·ª•c: {e}")
            return []
        finally:
            conn.close()

    def get_customer_by_phone_or_email(self, phone_or_email):
        """T√¨m kh√°ch h√†ng theo s·ªë ƒëi·ªán tho·∫°i ho·∫∑c email"""
        conn = self.connect()
        if conn is None:
            return None

        try:
            cursor = conn.cursor()
            query = """
            SELECT customer_code
            FROM Customers 
            WHERE phone = ? OR email = ?
        """
            cursor.execute(query, (phone_or_email, phone_or_email))

            result = cursor.fetchone()  # L·∫•y m·ªôt h√†ng duy nh·∫•t

            if result:  # N·∫øu c√≥ d·ªØ li·ªáu, tr·∫£ v·ªÅ chu·ªói
                return str(result[0])  # Ch·∫Øc ch·∫Øn tr·∫£ v·ªÅ ki·ªÉu chu·ªói
            else:
                return None  # Tr·∫£ v·ªÅ None n·∫øu kh√¥ng t√¨m th·∫•y kh√°ch h√†ng

        except sqlite3.Error as e:
            print(f"‚ùå L·ªói t√¨m kh√°ch h√†ng: {e}")
            return None  

        finally:
            conn.close()

    def get_customer_id_by_code(self, customer_code):
        """L·∫•y ID kh√°ch h√†ng t·ª´ m√£ kh√°ch h√†ng"""
        conn = self.connect()
        if conn is None:
            return None

        try:
            cursor = conn.cursor()
            print(f"üîç Debug - T√¨m ID cho m√£ KH: {customer_code}")  
            query = "SELECT id FROM Customers WHERE customer_code = ?"
            cursor.execute(query, (customer_code,))
            result = cursor.fetchone()
            print(f"üõ† Debug - K·∫øt qu·∫£ ID kh√°ch h√†ng: {result}")  

            return result[0] if result else None  # ‚úÖ L·∫•y gi√° tr·ªã th·ª±c t·∫ø, kh√¥ng tr·∫£ v·ªÅ tuple
        except sqlite3.Error as e:
            print(f"‚ùå L·ªói l·∫•y ID kh√°ch h√†ng: {e}")
            return None
        finally:
            conn.close()



    def get_employee_id_by_name(self, employee_name):
        """L·∫•y ID c·ªßa nh√¢n vi√™n t·ª´ t√™n"""
        conn = self.connect()
        if conn is None:
            return None

        try:
            cursor = conn.cursor()
            cursor.execute("SELECT id FROM Employees WHERE full_name = ?", (employee_name,))
            result = cursor.fetchone()
        
            if result:
                return result[0]  # Tr·∫£ v·ªÅ ID c·ªßa nh√¢n vi√™n
            else:
                return None  # Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n
        except sqlite3.Error as e:
            print(f"‚ùå L·ªói khi l·∫•y ID nh√¢n vi√™n: {e}")
            return None
        finally:
            conn.close()

    def add_order(self, customer_code, employee_name, total_amount, status, payment, note):
        """Th√™m ƒë∆°n h√†ng m·ªõi v·ªõi customer_code v√† employee_name"""
        print(f"üîç Debug - M√£ kh√°ch h√†ng nh·∫≠n ƒë∆∞·ª£c: {customer_code}")  

    # L·∫•y ID kh√°ch h√†ng
        customer_id = self.get_customer_id_by_code(customer_code)
        print(f"üõ† Debug - ID kh√°ch h√†ng: {customer_id}")  # Th√™m d√≤ng debug

        if customer_id is None:
            print("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng v·ªõi m√£ n√†y! Vui l√≤ng ki·ªÉm tra l·∫°i.")
            return False

    # L·∫•y ID nh√¢n vi√™n t·ª´ t√™n
        employee_id = self.get_employee_id_by_name(employee_name)
        print(f"üõ† Debug - ID nh√¢n vi√™n: {employee_id}")  # Th√™m d√≤ng debug

        if employee_id is None:
            print("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n v·ªõi t√™n n√†y! Vui l√≤ng ki·ªÉm tra l·∫°i.")
            return False

        conn = self.connect()
        if conn is None:
            return False

        try:
            cursor = conn.cursor()
            cursor.execute("""
        INSERT INTO Orders (customer_id, employee_id, total_amount, status, payment, note)
        VALUES (?, ?, ?, ?, ?, ?)
        """, (customer_id, employee_id, total_amount, status, payment, note))

            conn.commit()
            print("‚úÖ Th√™m ƒë∆°n h√†ng th√†nh c√¥ng!")
            return True
        except sqlite3.Error as e:
            print("‚ùå L·ªói khi th√™m ƒë∆°n h√†ng:", e)
            return False
        finally:
            conn.close()

    def update_order_total(self, order_id):
        """C·∫≠p nh·∫≠t t·ªïng ti·ªÅn ƒë∆°n h√†ng d·ª±a tr√™n t·ªïng gi√° t·ª´ OrdersDetails"""
        conn = self.connect()
        if conn is None:
            return False

        try:
            cursor = conn.cursor()

        # üîπ L·∫•y t·ªïng ti·ªÅn t·ª´ b·∫£ng OrdersDetails
            cursor.execute("""
                SELECT COALESCE(SUM(quantity * unit_price), 0) FROM OrdersDetails WHERE order_id = ?
        """, (order_id,))
            total_price = cursor.fetchone()[0]

        # üîÑ C·∫≠p nh·∫≠t t·ªïng ti·ªÅn v√†o b·∫£ng Orders
            cursor.execute("""
            UPDATE Orders SET total_amount = ? WHERE id = ?
        """, (total_price, order_id))
        
            conn.commit()
            print(f"‚úÖ T·ªïng ti·ªÅn c·ªßa ƒë∆°n h√†ng {order_id} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t: {total_price}")
            return True

        except sqlite3.Error as e:
            print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t t·ªïng ti·ªÅn: {e}")
        finally:
            conn.close()

        return False

    def get_last_inserted_order_code(self):
        """L·∫•y m√£ ƒë∆°n h√†ng v·ª´a ƒë∆∞·ª£c th√™m v√†o"""
        conn = self.connect()  # M·ªü k·∫øt n·ªëi ƒë·∫øn CSDL
        if conn is None:
            return None  # Tr·∫£ v·ªÅ None n·∫øu kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c

        try:
            cursor = conn.cursor()
            query = "SELECT order_code FROM Orders ORDER BY id DESC LIMIT 1"
            cursor.execute(query)
            result = cursor.fetchone()
            return result[0] if result else None  # N·∫øu c√≥ k·∫øt qu·∫£, tr·∫£ v·ªÅ m√£ ƒë∆°n h√†ng
        except sqlite3.Error as e:
            print(f"‚ùå L·ªói l·∫•y m√£ ƒë∆°n h√†ng: {e}")
            return None
        finally:
            conn.close()  # ƒê√≥ng k·∫øt n·ªëi


    def get_order_id_by_code(self, order_code):
        """L·∫•y id c·ªßa ƒë∆°n h√†ng d·ª±a tr√™n order_code"""
        conn = self.connect()
        if conn is None:
            return None

        try:
            cursor = conn.cursor()
            query = "SELECT id FROM Orders WHERE order_code = ?"
            cursor.execute(query, (order_code,))
            result = cursor.fetchone()
            return result[0] if result else None
        except sqlite3.Error as e:
            print(f"‚ùå L·ªói khi l·∫•y id ƒë∆°n h√†ng t·ª´ order_code: {e}")
            return None
        finally:
            conn.close()
    
    def get_product_id_by_name(self, product_name):
        """L·∫•y ID s·∫£n ph·∫©m t·ª´ t√™n s·∫£n ph·∫©m"""
        conn = self.connect()
        if conn is None:
            return None

        try:
            cursor = conn.cursor()
            query = "SELECT id FROM Products WHERE product_name = ?"
            cursor.execute(query, (product_name,))
            result = cursor.fetchone()
            return result[0] if result else None  # Tr·∫£ v·ªÅ ID n·∫øu c√≥, n·∫øu kh√¥ng th√¨ None
        except sqlite3.Error as e:
            print(f"‚ùå L·ªói khi l·∫•y ID s·∫£n ph·∫©m t·ª´ t√™n: {e}")
            return None
        finally:
            conn.close()

    def get_product_list(self):
        """L·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ CSDL"""
        conn = self.connect()
        if conn is None:
            return []

        try:
            cursor = conn.cursor()
            cursor.execute("SELECT id, product_name FROM Products")
            products = cursor.fetchall()  # L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
            return products  # Danh s√°ch tuple (product_code, product_name)
        except sqlite3.Error as e:
            print(f"‚ùå L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m: {e}")
            return []
        finally:
            conn.close()


    def add_order_detail(self, order_code, product_name, quantity, unit_price, note):
        """Th√™m chi ti·∫øt ƒë∆°n h√†ng v√†o b·∫£ng OrdersDetails v·ªõi order_code v√† t√™n s·∫£n ph·∫©m t·ª´ giao di·ªán"""
    
    # üîÑ Chuy·ªÉn ƒë·ªïi order_code th√†nh order_id
        order_id = self.get_order_id_by_code(order_code)
        if order_id is None:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y ID ƒë∆°n h√†ng cho order_code: {order_code}")
            return False
        conn = self.connect()
        if conn is None:
            return False

        try:
            cursor = conn.cursor()

        # üõí Th√™m chi ti·∫øt ƒë∆°n h√†ng v√†o b·∫£ng OrdersDetails
            cursor.execute("""
            INSERT INTO OrdersDetails (order_id, product_id, quantity, unit_price, note)
            VALUES (?, ?, ?, ?, ?)
        """, (order_id, product_name, quantity, unit_price, note))

        # üîÑ C·∫≠p nh·∫≠t t·ªïng ti·ªÅn ƒë∆°n h√†ng sau khi th√™m s·∫£n ph·∫©m
            self.update_order_total(order_id)

            conn.commit()
            print(f"‚úÖ Th√™m s·∫£n ph·∫©m '{product_name}' v√†o ƒë∆°n h√†ng {order_code} th√†nh c√¥ng!")
            return True
        except sqlite3.Error as e:
            print(f"‚ùå L·ªói khi th√™m chi ti·∫øt ƒë∆°n h√†ng: {e}")
            return False
        finally:
            conn.close()



    def update_order(self, order_code, customer_code, employee_name, total_amount, status, payment, note):
        """C·∫≠p nh·∫≠t ƒë∆°n h√†ng trong CSDL"""
        customer_id = self.get_customer_id_by_code(customer_code)
        print(f"üõ† Debug - ID kh√°ch h√†ng: {customer_id}")  # Th√™m d√≤ng debug

        # L·∫•y ID nh√¢n vi√™n t·ª´ t√™n
        employee_id = self.get_employee_id_by_name(employee_name)
        print(f"üõ† Debug - ID nh√¢n vi√™n: {employee_id}")  # Th√™m d√≤ng debug

        if employee_id is None:
            print("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n v·ªõi t√™n n√†y! Vui l√≤ng ki·ªÉm tra l·∫°i.")
            return False
        
        conn = self.connect()
        if conn is None:
            return False

        try:
            cursor = conn.cursor()
            
            # C·∫≠p nh·∫≠t ƒë∆°n h√†ng
            query = """
                UPDATE Orders 
                SET customer_id = ?, employee_id = ?, total_amount = ?, status = ?, payment = ?, note = ?
                WHERE order_code = ?
            """
            cursor.execute(query, (customer_id, employee_id, total_amount, status, payment, note, order_code))
            conn.commit()  # L∆∞u thay ƒë·ªïi
            
            return cursor.rowcount > 0  # Tr·∫£ v·ªÅ True n·∫øu c√≥ b·∫£n ghi ƒë∆∞·ª£c c·∫≠p nh·∫≠t
        except sqlite3.Error as e:
            print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng: {e}")
            return False
        finally:
            conn.close()  # ƒê√≥ng k·∫øt n·ªëi




    def get_order_by_code(self, order_code):
        """L·∫•y d·ªØ li·ªáu ƒë∆°n h√†ng theo m√£ ƒë∆°n h√†ng"""
        conn = self.connect()
        if conn is None:
            return None

        try:
            cursor = conn.cursor()
            query = """
            SELECT c.customer_code, e.full_name, o.total_amount, 
                   o.status, o.payment, o.note
            FROM Orders o
            JOIN Customers c ON o.customer_id = c.id
            JOIN Employees e ON o.employee_id = e.id
            WHERE o.order_code = ?
        """
            cursor.execute(query, (order_code,))
            row = cursor.fetchone()

            if row:
                return {
                "customer_code": row[0],   # M√£ kh√°ch h√†ng
                "employee_name": row[1],   # Nh√¢n vi√™n x·ª≠ l√Ω (ƒê·ªïi key ƒë·ªÉ th·ªëng nh·∫•t)
                "total_amount": row[2],    # T·ªïng ti·ªÅn
                "status": row[3],          # Tr·∫°ng th√°i
                "payment": row[4],         # Thanh to√°n
                "note": row[5]             # Ghi ch√∫
            }
            return None  # Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng

        except sqlite3.Error as e:
            print(f"‚ùå L·ªói khi l·∫•y ƒë∆°n h√†ng: {e}")
            return None

        finally:
            conn.close()
