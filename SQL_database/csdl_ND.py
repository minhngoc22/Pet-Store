from SQL_database.ketnoiSQL import Database  
import sqlite3
import hashlib  # ƒê·∫£m b·∫£o import th∆∞ vi·ªán hashlib

class UserDatabase(Database):
    def get_all_users(self):
        """L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng"""
        conn = self.connect()
        if conn is None:
            return False, []

        try:
            cursor = conn.cursor()
            query = "SELECT  user_code, username, password,full_name, email, role,  note FROM Users"
            cursor.execute(query)
            users = cursor.fetchall()
            print(f"‚ö° Debug - D·ªØ li·ªáu ng∆∞·ªùi d√πng: {users}")
            return True, users
        except sqlite3.Error as e:
            print(f"‚ùå L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng: {e}")
            return False, []
        finally:
            conn.close()

    def add_user(self, username, password, full_name, email, role, note):
        """Th√™m ng∆∞·ªùi d√πng m·ªõi v·ªõi m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c m√£ h√≥a"""
        conn = self.connect()
        if conn is None:
            return False

        try:
            cursor = conn.cursor()
        
        # M√£ h√≥a m·∫≠t kh·∫©u b·∫±ng SHA-256
            hashed_password = hashlib.sha256(password.encode()).hexdigest()

            cursor.execute("""
            INSERT INTO Users (username, password, full_name, email, role, note) 
            VALUES (?, ?, ?, ?, ?, ?)
        """, (username, hashed_password, full_name, email, role, note))

            conn.commit()
            print(f"‚úÖ Th√™m ng∆∞·ªùi d√πng '{username}' th√†nh c√¥ng!")
            return True
        except sqlite3.Error as e:
            print("‚ùå L·ªói khi th√™m ng∆∞·ªùi d√πng:", e)
            return False
        finally:
            conn.close()

    def delete_user(self, user_code):
        """X√≥a ng∆∞·ªùi d√πng theo ID"""
        conn = self.connect()
        if conn is None:
            return False

        try:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM Users WHERE user_code = ?", (user_code,))
            conn.commit()
            print(f"üóëÔ∏è X√≥a ng∆∞·ªùi d√πng c√≥ ID {user_code} th√†nh c√¥ng!")
            return True
        except sqlite3.Error as e:
            print("‚ùå L·ªói khi x√≥a ng∆∞·ªùi d√πng:", e)
            return False
        finally:
            conn.close()

    def update_user(self, user_code, username, full_name, role, password=None, note=""):
        """C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng"""
        conn = self.connect()
        if conn is None:
            return False

        try:
            cursor = conn.cursor()

        # L·∫•y vai tr√≤ hi·ªán t·∫°i
            cursor.execute("SELECT role FROM Users WHERE user_code = ?", (user_code,))
            current_role = cursor.fetchone()

            if not current_role:
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID {user_code}")
                return False

            current_role = current_role[0]

        # N·∫øu ng∆∞·ªùi d√πng l√† "Kh√°ch h√†ng", kh√¥ng cho ph√©p ƒë·ªïi role
            if current_role.lower() == "kh√°ch h√†ng":
                role = current_role  

        # C·∫≠p nh·∫≠t th√¥ng tin
            if password:  # N·∫øu c√≥ m·∫≠t kh·∫©u m·ªõi
                query = """
            UPDATE Users
            SET username = ?, full_name = ?, role = ?, password = ?, note = ?
            WHERE user_code = ?
            """
                cursor.execute(query, (username, full_name, role, password, note, user_code))
            else:  # N·∫øu kh√¥ng c√≥ m·∫≠t kh·∫©u m·ªõi
                query = """
            UPDATE Users
            SET username = ?, full_name = ?, role = ?, note = ?
            WHERE user_code = ?
            """
                cursor.execute(query, (username, full_name, role, note, user_code))

            conn.commit()
            print(f"‚úÖ C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng ID {user_code} th√†nh c√¥ng!")
            return True

        except sqlite3.Error as e:
            print(f"‚ùå L·ªói c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng: {e}")
            return False

        finally:
            conn.close()

    def get_user_by_name(self, search_text):
        """T√¨m ki·∫øm ng∆∞·ªùi d√πng theo t√™n ƒëƒÉng nh·∫≠p, h·ªó tr·ª£ t√¨m g·∫ßn ƒë√∫ng b·∫±ng LIKE"""
        conn = self.connect()
        if conn is None:
            return None

        try:
            cursor = conn.cursor()
            query = """
            SELECT user_code, username,password, full_name, email, role, note 
            FROM Users 
            WHERE full_name LIKE ?
        """
            cursor.execute(query, (f"%{search_text}%",))  # T√¨m ki·∫øm g·∫ßn ƒë√∫ng b·∫±ng LIKE
            results = cursor.fetchall()
            return results
        except sqlite3.Error as e:
            print(f"‚ùå L·ªói t√¨m ki·∫øm nh√¢n vi√™n: {e}")
            return []
        finally:
            conn.close()

    def get_user_by_code(self, user_code):
        """L·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo ID"""
        conn = self.connect()
        if conn is None:
            return None

        try:
            cursor = conn.cursor()
            query = "SELECT  user_code, username, full_name,  role, note FROM Users WHERE user_code = ?"
            cursor.execute(query, (user_code,))
            user = cursor.fetchone()

            if user:
                return {
                    
                    "user_code": user[0],
                    "username": user[1],
                    "full_name": user[2],
                    "role": user[3],
                    "note": user[4]
                }
            return None
        except sqlite3.Error as e:
            print(f"‚ùå L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng: {e}")
            return None
        finally:
            conn.close()

    def get_all_roles(self):
        """L·∫•y danh s√°ch t·∫•t c·∫£ c√°c vai tr√≤ t·ª´ b·∫£ng Users"""
        conn = self.connect()
        if conn is None:
            return []

        try:
            cursor = conn.cursor()
            query = "SELECT DISTINCT role FROM Users"
            cursor.execute(query)
            roles = [row[0] for row in cursor.fetchall()]
            print(f"‚úÖ Danh s√°ch vai tr√≤: {roles}")
            return roles
        except sqlite3.Error as e:
            print(f"‚ùå L·ªói khi l·∫•y danh s√°ch vai tr√≤: {e}")
            return []
        finally:
            conn.close()

    def get_users_by_role(self, role):
        """L·∫•y danh s√°ch ng∆∞·ªùi d√πng theo vai tr√≤"""
        conn = self.connect()
        if conn is None:
            return False, []

        try:
            cursor = conn.cursor()
            if role == "T·∫•t c·∫£":
                query = "SELECT user_code, username,password, full_name, email, role, note FROM Users"
                cursor.execute(query)
            else:
                query = "SELECT user_code, username, full_name, email, role, note FROM Users WHERE role = ?"
                cursor.execute(query, (role,))
        
            users = cursor.fetchall()
            return True, users  # Tr·∫£ v·ªÅ (bool, list)
        except sqlite3.Error as e:
            print(f"‚ùå L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng theo vai tr√≤: {e}")
            return False, []
        finally:
            conn.close()

