import sys
import os
from PyQt6 import QtWidgets
from PyQt6.QtWidgets import QMessageBox
from PyQt6.QtGui import QStandardItemModel, QStandardItem
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QIcon, QPixmap
from UIPython.ui_mainwindow import Ui_UIMainWindow
from SQL_database.csdl_sp import ProductDatabase

class MainWindowMain(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_UIMainWindow()
        self.ui.setupUi(self)

        # üîó K·∫øt n·ªëi SQLite
        self.db = ProductDatabase()
        if not self.db.connect():
            QMessageBox.critical(self, "L·ªói", "Kh√¥ng th·ªÉ k·∫øt n·ªëi CSDL!")
            return  # D·ª´ng n·∫øu kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c

        # N·∫°p d·ªØ li·ªáu v√†o b·∫£ng s·∫£n ph·∫©m
        self.load_data()

        # üîó K·∫øt n·ªëi c√°c n√∫t b·∫•m v·ªõi trang t∆∞∆°ng ·ª©ng
        self.ui.Menu.setCurrentIndex(0)  # Trang ch·ªß l√† trang ƒë·∫ßu ti√™n
        self.ui.btn_home.clicked.connect(self.trangchu)
        self.ui.btn_spham.clicked.connect(self.sanpham)
        self.ui.btn_nhanvien.clicked.connect(self.nhanvien)
        self.ui.btn_donhang.clicked.connect(self.donhang)
        self.ui.btn_khachhang.clicked.connect(self.khachhang)
        self.ui.btn_logout.clicked.connect(self.logout)
        self.ui.btn_refresh.clicked.connect(self.refresh_data)
        self.ui.btn_themsp.clicked.connect(self.show_themsp)
        self.ui.btn_xoasp.clicked.connect(self.delete_product)
        self.ui.cbo_sp.currentIndexChanged.connect(self.filter_products)

        self.load_categories()

    def trangchu(self):
        """Chuy·ªÉn v·ªÅ trang ch·ªß"""
        self.ui.Menu.setCurrentIndex(0)

    def sanpham(self):
        """Chuy·ªÉn v·ªÅ trang s·∫£n ph·∫©m"""
        self.ui.Menu.setCurrentIndex(1)

    def nhanvien(self):
        """Chuy·ªÉn v·ªÅ trang nh√¢n vi√™n"""
        self.ui.Menu.setCurrentIndex(2)

    def donhang(self):
        """Chuy·ªÉn v·ªÅ trang ƒë∆°n h√†ng"""
        self.ui.Menu.setCurrentIndex(3)

    def khachhang(self):
        """Chuy·ªÉn v·ªÅ trang kh√°ch h√†ng"""
        self.ui.Menu.setCurrentIndex(4)

    def logout(self):
        """X·ª≠ l√Ω ƒëƒÉng xu·∫•t"""
        reply = QMessageBox.question(
            self, "X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            QMessageBox.StandardButton.No
        )

        if reply == QMessageBox.StandardButton.Yes:
            print("üî¥ [LOGOUT] ƒêƒÉng xu·∫•t th√†nh c√¥ng!")
            self.close()  # ƒê√≥ng c·ª≠a s·ªï ch√≠nh
            self.show_login()

    def load_data(self):
        """N·∫°p to√†n b·ªô d·ªØ li·ªáu t·ª´ b·∫£ng Products l√™n QTableView"""
        columns, products = self.db.get_all_products()

        if not products:
            return  # Kh√¥ng c√≥ d·ªØ li·ªáu, tho√°t s·ªõm

        # üìå ƒê·ªïi t√™n c·ªôt hi·ªÉn th·ªã
        column_names = {
            "id": "ID",
            "product_name": "T√™n S·∫£n Ph·∫©m",
            "category": "Danh M·ª•c",
            "price": "Gi√° B√°n",
            "stock_quantity": "S·ªë L∆∞·ª£ng",
            "supplier": "Nh√† Cung C·∫•p",
            "image_path": "·∫¢nh"
        }
        displayed_headers = [column_names.get(col, col) for col in columns]

        # üìå S·ª≠ d·ª•ng QStandardItemModel ƒë·ªÉ hi·ªÉn th·ªã d·ªØ li·ªáu
        model = QStandardItemModel(len(products), len(columns))
        model.setHorizontalHeaderLabels(displayed_headers)  # ƒê·∫∑t t√™n c·ªôt

        # üìå Th√™m d·ªØ li·ªáu v√†o model
        for row_idx, row_data in enumerate(products):
            for col_idx, value in enumerate(row_data):
                item = QStandardItem()

                if columns[col_idx] == "image_path" and value:  # N·∫øu c·ªôt l√† ·∫£nh
                    if os.path.exists(value):  # Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
                        pixmap = QPixmap(value).scaled(60, 60, Qt.AspectRatioMode.KeepAspectRatio)
                        icon = QIcon(pixmap)
                        item.setIcon(icon)  # ƒê·∫∑t icon cho √¥
                    else:
                        item.setText("Kh√¥ng c√≥ ·∫£nh")
                else:
                    item.setText(str(value))
                    item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)  # CƒÉn gi·ªØa

                model.setItem(row_idx, col_idx, item)

        # G√°n model cho QTableView
        self.ui.tb_sanpham.setModel(model)

        # üîπ T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc c·ªôt
        self.ui.tb_sanpham.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)

    def show_login(self):
        """Hi·ªÉn th·ªã m√†n h√¨nh ƒëƒÉng nh·∫≠p"""
        from dangnhap import Login  # Import b√™n trong h√†m ƒë·ªÉ tr√°nh v√≤ng l·∫∑p import
        self.login_window = Login()
        self.login_window.show()
        self.close()  # ƒê√≥ng c·ª≠a s·ªï ch√≠nh

    def show_themsp(self):
        from themSP import EventHandler
        self.themsp_window = EventHandler()
        self.themsp_window.show()

    def delete_product(self):
        """X√≥a s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn"""
        selected_indexes = self.ui.tb_sanpham.selectionModel().selectedRows()

        if not selected_indexes:
            QMessageBox.warning(self, "Ch√∫ √Ω", "Vui l√≤ng ch·ªçn m·ªôt s·∫£n ph·∫©m ƒë·ªÉ x√≥a.")
            return

        # L·∫•y ID c·ªßa s·∫£n ph·∫©m t·ª´ d√≤ng ƒë∆∞·ª£c ch·ªçn
        selected_row = selected_indexes[0].row()  # L·∫•y ch·ªâ s·ªë d√≤ng ƒë·∫ßu ti√™n ƒë∆∞·ª£c ch·ªçn
        model = self.ui.tb_sanpham.model()
        product_id = model.item(selected_row, 0).text()  # C·ªôt 0 ch·ª©a ID

        # X√°c nh·∫≠n tr∆∞·ªõc khi x√≥a
        reply = QMessageBox.question(
            self, "X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m ID {product_id}?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            QMessageBox.StandardButton.No
    )

        if reply == QMessageBox.StandardButton.Yes:
            # X√≥a s·∫£n ph·∫©m kh·ªèi CSDL
            if self.db.delete_product(product_id):
                QMessageBox.information(self, "Th√†nh c√¥ng", "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a.")
                self.load_data()  # C·∫≠p nh·∫≠t l·∫°i b·∫£ng
            else:
                QMessageBox.critical(self, "L·ªói", "X√≥a s·∫£n ph·∫©m th·∫•t b·∫°i!")
        
    def load_categories(self):
        """T·∫£i danh s√°ch danh m·ª•c t·ª´ SQLite v√† hi·ªÉn th·ªã tr√™n ComboBox."""
        conn = self.db.connect()
        if conn is None:  # Ki·ªÉm tra n·∫øu k·∫øt n·ªëi th·∫•t b·∫°i
            QMessageBox.critical(self, "L·ªói", "Kh√¥ng th·ªÉ k·∫øt n·ªëi CSDL!")
            return

        cursor = conn.cursor()  
        cursor.execute("SELECT DISTINCT category FROM Products")
        categories = cursor.fetchall()
    
        self.ui.cbo_sp.clear()
        self.ui.cbo_sp.addItem("T·∫•t c·∫£")
        for category in categories:
            self.ui.cbo_sp.addItem(category[0])

        conn.close()


    def filter_products(self):
        """L·ªçc s·∫£n ph·∫©m theo danh m·ª•c ƒë∆∞·ª£c ch·ªçn v√† hi·ªÉn th·ªã h√¨nh ·∫£nh."""
        selected_category = self.ui.cbo_sp.currentText()

        conn = self.db.connect()
        if conn is None:
            QMessageBox.critical(self, "L·ªói", "Kh√¥ng th·ªÉ k·∫øt n·ªëi CSDL!")
            return

        cursor = conn.cursor()

        query = """
            SELECT id, product_name, category, price, stock_quantity, supplier, image_path
            FROM Products
    """

        if selected_category != "T·∫•t c·∫£":
            query += " WHERE category = ?"
            cursor.execute(query, (selected_category,))
        else:
            cursor.execute(query)

        products = cursor.fetchall()
        conn.close()

        self.update_table(products)  # C·∫≠p nh·∫≠t l·∫°i b·∫£ng

    def update_table(self, products):
        """C·∫≠p nh·∫≠t d·ªØ li·ªáu trong b·∫£ng s·∫£n ph·∫©m v√† ƒë·∫£m b·∫£o hi·ªÉn th·ªã h√¨nh ·∫£nh"""
        model = QStandardItemModel(len(products), 7)  # 7 l√† s·ªë c·ªôt
        headers = ["ID", "T√™n S·∫£n Ph·∫©m", "Danh M·ª•c", "Gi√° B√°n", "S·ªë L∆∞·ª£ng", "Nh√† Cung C·∫•p", "·∫¢nh"]
        model.setHorizontalHeaderLabels(headers)

        for row_idx, row_data in enumerate(products):
            for col_idx, value in enumerate(row_data):
                item = QStandardItem()

                if col_idx == 6 and value:  # C·ªôt 6 l√† c·ªôt ch·ª©a ƒë∆∞·ªùng d·∫´n ·∫£nh
                    if os.path.exists(value):
                        pixmap = QPixmap(value).scaled(60, 60, Qt.AspectRatioMode.KeepAspectRatio)
                        icon = QIcon(pixmap)
                        item.setIcon(icon)  # Hi·ªÉn th·ªã ·∫£nh trong b·∫£ng
                    else:
                        item.setText("Kh√¥ng c√≥ ·∫£nh")
                else:
                    item.setText(str(value))
                    item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)  # CƒÉn gi·ªØa

                model.setItem(row_idx, col_idx, item)

        self.ui.tb_sanpham.setModel(model)

    # üîπ T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc c·ªôt
        self.ui.tb_sanpham.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)


    def refresh_data(self):
        """L√†m m·ªõi b·∫£ng s·∫£n ph·∫©m nh∆∞ng gi·ªØ nguy√™n danh m·ª•c ƒëang ch·ªçn"""
        selected_category = self.ui.cbo_sp.currentText()

        if selected_category == "T·∫•t c·∫£":
            self.load_data()  # N·∫øu ch·ªçn "T·∫•t c·∫£", t·∫£i l·∫°i to√†n b·ªô d·ªØ li·ªáu
        else:
            self.filter_products()  # N·∫øu ƒëang l·ªçc theo danh m·ª•c, ch·ªâ c·∫≠p nh·∫≠t danh m·ª•c ƒë√≥

    


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    window = MainWindowMain()
    window.show()
    sys.exit(app.exec())
