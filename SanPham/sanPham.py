
import sys
import os
from PyQt6 import QtWidgets
from PyQt6.QtWidgets import QMessageBox
from PyQt6.QtGui import QStandardItemModel, QStandardItem, QIcon, QPixmap
from PyQt6.QtCore import Qt
from Main.ui_mainwindow import Ui_UIMainWindow
from SQL_database.csdl_sp import ProductDatabase

class Sanpham:
    def __init__(self, ui):
        self.ui = ui
        self.model = QStandardItemModel()
        self.ui.tb_sanpham.setModel(self.model)
        
        self.db = ProductDatabase()
        if not self.db.connect():
            QMessageBox.critical(None, "L·ªói", "Kh√¥ng th·ªÉ k·∫øt n·ªëi CSDL!")
            return
        
        self.load_and_update_table()
        
        self.ui.btn_refresh.clicked.connect(self.refresh_data)
        self.ui.btn_themsp.clicked.connect(self.show_themsp)
        self.ui.btn_xoasp.clicked.connect(self.delete_product)
        self.ui.btn_suasp.clicked.connect(self.edit_product)
        self.ui.btn_timkiemsp.clicked.connect(self.search)
        self.ui.cbo_sp.currentIndexChanged.connect(self.filter_products)
        
        self.load_categories()
    
    def load_and_update_table(self, products=None):
        """T·∫£i v√† c·∫≠p nh·∫≠t b·∫£ng s·∫£n ph·∫©m"""
        if products is None:
            success, products = self.db.get_all_products()
            if not success:
                QMessageBox.critical(None, "L·ªói", "Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu s·∫£n ph·∫©m!")
                return
        else:
            success = True  # ƒê·∫£m b·∫£o 'success' lu√¥n c√≥ gi√° tr·ªã

        print(f"‚ö° Debug - S·ªë s·∫£n ph·∫©m sau khi t·∫£i l·∫°i: {len(products)}")  # Debug s·ªë l∆∞·ª£ng

        self.model.clear()

        column_names = ["ID", "T√™n S·∫£n Ph·∫©m", "Danh M·ª•c", "Gi√° B√°n", "S·ªë L∆∞·ª£ng", "Nh√† Cung C·∫•p", "·∫¢nh","Ghi ch√∫"]
        self.model.setColumnCount(len(column_names))  # ‚úÖ ƒê·∫∑t s·ªë c·ªôt ch√≠nh x√°c
        self.model.setHorizontalHeaderLabels(column_names)

        for row_idx, row_data in enumerate(products):
            for col_idx, value in enumerate(row_data):
                item = QStandardItem()
                if col_idx == 6 and value:  # ·∫¢nh
                    if os.path.exists(value):
                        pixmap = QPixmap(value).scaled(60, 60, Qt.AspectRatioMode.KeepAspectRatio)
                        icon = QIcon(pixmap)
                        item.setIcon(icon)
                    else:
                        item.setText("Kh√¥ng c√≥ ·∫£nh")
                else:
                    item.setText(str(value))
                    item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)
                self.model.setItem(row_idx, col_idx, item)

        self.ui.tb_sanpham.setModel(self.model)
        self.ui.tb_sanpham.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)

    
    
    def delete_product(self):
        selected_indexes = self.ui.tb_sanpham.selectionModel().selectedRows()
        if not selected_indexes:
            QMessageBox.warning(None, "Ch√∫ √Ω", "Vui l√≤ng ch·ªçn m·ªôt s·∫£n ph·∫©m ƒë·ªÉ x√≥a.")
            return
        
        selected_row = selected_indexes[0].row()
        product_id = self.model.item(selected_row, 0).text()
        
        reply = QMessageBox.question(None, "X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m ID {product_id}?",
                                     QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                                     QMessageBox.StandardButton.No)
        if reply == QMessageBox.StandardButton.Yes:
            if self.db.delete_product(product_id):
                QMessageBox.information(None, "Th√†nh c√¥ng", "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a.")
                self.refresh_data()
            else:
                QMessageBox.critical(None, "L·ªói", "X√≥a s·∫£n ph·∫©m th·∫•t b·∫°i!")




    def show_themsp(self):
        from SanPham.themSP import EventHandler
        self.themsp_window = EventHandler()
        self.themsp_window.show()

    def delete_product(self):
        """X√≥a s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn kh·ªèi CSDL"""
        selected_indexes = self.ui.tb_sanpham.selectionModel().selectedRows()
        if not selected_indexes:
            QMessageBox.warning(None, "Ch√∫ √Ω", "Vui l√≤ng ch·ªçn m·ªôt s·∫£n ph·∫©m ƒë·ªÉ x√≥a.")
            return

        selected_row = selected_indexes[0].row()
        product_id = self.model.item(selected_row, 0).text().strip()  # L·∫•y ID s·∫£n ph·∫©m

        reply = QMessageBox.question(
            None, "X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m ID: {product_id}?",
        QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
        QMessageBox.StandardButton.No
    )

        if reply == QMessageBox.StandardButton.Yes:
            if self.db.delete_product(product_id):  # G·ªçi h√†m x√≥a trong CSDL
                QMessageBox.information(None, "Th√†nh c√¥ng", "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a.")
                self.refresh_data()  # L√†m m·ªõi b·∫£ng sau khi x√≥a
            else:   
                QMessageBox.critical(None, "L·ªói", "X√≥a s·∫£n ph·∫©m th·∫•t b·∫°i! C√≥ th·ªÉ ID kh√¥ng t·ªìn t·∫°i.")

        
    def load_categories(self):
        """T·∫£i danh s√°ch danh m·ª•c t·ª´ SQLite v√† hi·ªÉn th·ªã tr√™n ComboBox."""
        conn = self.db.connect()
        if conn is None:  # Ki·ªÉm tra n·∫øu k·∫øt n·ªëi th·∫•t b·∫°i
            QMessageBox.critical(self, "L·ªói", "Kh√¥ng th·ªÉ k·∫øt n·ªëi CSDL!")
            return

        cursor = conn.cursor()  
        cursor.execute("SELECT category_name FROM Categories")
        categories = cursor.fetchall()
    
        self.ui.cbo_sp.clear()
        self.ui.cbo_sp.addItem("T·∫•t c·∫£")
        for category in categories:
            self.ui.cbo_sp.addItem(category[0])

        conn.close()



    def filter_products(self):
        """L·ªçc s·∫£n ph·∫©m theo danh m·ª•c ƒë∆∞·ª£c ch·ªçn"""
        selected_category = self.ui.cbo_sp.currentText()
        print(f"‚ö° Debug - L·ªçc s·∫£n ph·∫©m theo danh m·ª•c: {selected_category}")  # Debug

        products = self.db.get_products_by_category(selected_category)  # Gi·∫£ s·ª≠ c√≥ h√†m n√†y trong CSDL
        print(f"‚ö° Debug - S·ªë s·∫£n ph·∫©m t√¨m th·∫•y: {len(products)}")  # Debug

        self.load_and_update_table(products)


    

    # üîπ T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc c·ªôt
        self.ui.tb_sanpham.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)


    def refresh_data(self):
        """L√†m m·ªõi d·ªØ li·ªáu b·∫£ng s·∫£n ph·∫©m"""
        self.load_and_update_table()
        self.load_categories()  # L√†m m·ªõi ComboBox danh m·ª•c

    

    def edit_product(self):
        """S·ª≠a th√¥ng tin s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn"""
        selected_indexes = self.ui.tb_sanpham.selectionModel().selectedRows()

        if not selected_indexes:
            QMessageBox.warning(None, "Ch√∫ √Ω", "Vui l√≤ng ch·ªçn m·ªôt s·∫£n ph·∫©m ƒë·ªÉ s·ª≠a.")
            return

        # L·∫•y ID c·ªßa s·∫£n ph·∫©m t·ª´ d√≤ng ƒë∆∞·ª£c ch·ªçn
        selected_row = selected_indexes[0].row()
        model = self.ui.tb_sanpham.model()
        product_id = model.item(selected_row, 0).text()  # C·ªôt 0 ch·ª©a ID

        from SanPham.updateSP import EditProductWindow  # Import l·ªõp giao di·ªán s·ª≠a s·∫£n ph·∫©m
        self.sua_sp_window = EditProductWindow(product_id, self.db)
        self.sua_sp_window.show()
        self.load_and_update_table()  # C·∫≠p nh·∫≠t b·∫£ng sau khi ƒë√≥ng c·ª≠a s·ªï





    def search(self):
        search_text = self.ui.txt_timkimsp.toPlainText().strip()  # L·∫•y t·ª´ kh√≥a t√¨m ki·∫øm

        if not search_text:
            self.load_data()  # N·∫øu √¥ t√¨m ki·∫øm tr·ªëng, n·∫°p l·∫°i to√†n b·ªô d·ªØ li·ªáu
            return

        products = self.db.search_product_by_name(search_text)

        # X√≥a d·ªØ li·ªáu c≈© tr∆∞·ªõc khi c·∫≠p nh·∫≠t k·∫øt qu·∫£ m·ªõi
        self.model.clear()

    # ƒê·∫∑t l·∫°i ti√™u ƒë·ªÅ c·ªôt
        headers = ["ID", "T√™n S·∫£n Ph·∫©m", "Danh M·ª•c", "Gi√° B√°n", "S·ªë L∆∞·ª£ng", "Nh√† Cung C·∫•p", "·∫¢nh"]
        self.model.setHorizontalHeaderLabels(headers)

        if products:
            for product in products:
                row_data = [
                QStandardItem(str(product["id"])),
                QStandardItem(product["product_name"]),
                QStandardItem(product["category_name"]),
                QStandardItem(str(product["price"])),
                QStandardItem(str(product["stock_quantity"])),
                QStandardItem(product["supplier"])
            ]

            # Hi·ªÉn th·ªã ·∫£nh s·∫£n ph·∫©m
                image_item = QStandardItem()
                image_path = product["image_path"]
                if image_path and os.path.exists(image_path):
                    pixmap = QPixmap(image_path).scaled(50, 50, Qt.AspectRatioMode.KeepAspectRatio)  
                    icon = QIcon(pixmap)
                    image_item.setIcon(icon)
                else:
                    image_item.setText("Kh√¥ng c√≥ ·∫£nh")

                row_data.append(image_item)

                self.model.appendRow(row_data)
        else:
            QMessageBox.information(self, "K·∫øt qu·∫£", "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p!")

    # G√°n l·∫°i model cho b·∫£ng
        self.ui.tb_sanpham.setModel(self.model)

    # CƒÉn ch·ªânh c·ªôt t·ª± ƒë·ªông
        self.ui.tb_sanpham.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)




if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    window = Sanpham()
    window.show()
    sys.exit(app.exec())

    


